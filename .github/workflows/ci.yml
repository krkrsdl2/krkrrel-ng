name: Continuous Integration
on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.build"
      - "**.in"
      - "**.yml"
  pull_request:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.build"
      - "**.in"
      - "**.yml"

jobs:
  build-ubuntu:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo apt-get update
      - run: sudo apt-get install build-essential
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/
      - run: meson compile -C build
      - uses: actions/upload-artifact@master
        with:
          name: krkrrel-ubuntu
          path: build/krkrrel
  build-win32:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - run: sudo apt-get update
      - run: sudo apt-get install build-essential mingw-w64
      - run: sudo update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
      - run: sudo update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
      - uses: actions/setup-python@v1
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/ --cross-file ./external/meson_toolchains/mingw32_meson.ini
      - run: meson compile -C build
      - uses: actions/upload-artifact@master
        with:
          name: krkrrel-win32
          path: build/krkrrel.exe
  build-macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/
        env:
           "CMAKE_OSX_ARCHITECTURES": "x86_64;arm64"
      - run: meson compile -C build
      - uses: actions/upload-artifact@master
        with:
          name: krkrrel-macos
          path: build/krkrrel

  create-release:
    needs: [build-ubuntu, build-win32, build-macos]
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Download ubuntu artifact
      uses: actions/download-artifact@v2
      with:
        name: krkrrel-ubuntu

    - name: Download win32 artifact
      uses: actions/download-artifact@v2
      with:
        name: krkrrel-win32

    - name: Download macos artifact
      uses: actions/download-artifact@v2
      with:
        name: krkrrel-macos

    - name: Prepare artifacts for release
      run: |
        7z a -tzip krkrrel-ubuntu.zip krkrrel-ubuntu/*
        7z a -tzip krkrrel-win32.zip krkrrel-win32/*
        7z a -tzip krkrrel-macos.zip krkrrel-macos/*

    - name: Create prerelease
      if: github.ref == 'refs/heads/main'
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        automatic_release_tag: "latest"
        title: "Latest development builds"
        files: |
          krkrrel-ubuntu.zip
          krkrrel-win32.zip
          krkrrel-macos.zip
