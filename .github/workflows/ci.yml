name: Continuous Integration
on:
  push:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.build"
      - "**.in"
      - "**.yml"
  pull_request:
    paths:
      - "**.c"
      - "**.h"
      - "**.cpp"
      - "**.hpp"
      - "**.build"
      - "**.in"
      - "**.yml"

jobs:
  build-ubuntu:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      options: "--user 0"
    steps:
      - run: apt-get -y update
      - run: apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install git build-essential
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/
      - run: meson compile -C build
      - uses: actions/upload-artifact@v4
        with:
          name: krkrrel-ubuntu
          path: build/krkrrel
  build-win32:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      options: "--user 0"
    steps:
      - run: apt-get -y update
      - run: apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install git build-essential mingw-w64
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - run: update-alternatives --set i686-w64-mingw32-gcc /usr/bin/i686-w64-mingw32-gcc-posix
      - run: update-alternatives --set i686-w64-mingw32-g++ /usr/bin/i686-w64-mingw32-g++-posix
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/ --cross-file ./external/meson_toolchains/mingw32_meson.ini
      - run: meson compile -C build
      - uses: actions/upload-artifact@v4
        with:
          name: krkrrel-win32
          path: build/krkrrel.exe
  build-macos:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: |
            ${{ runner.os }}-pip
      - run: python -m pip install --upgrade meson ninja
      - run: meson setup build/ --cross-file cross-file-macos-universal.txt
      - run: meson compile -C build
      - uses: actions/upload-artifact@v4
        with:
          name: krkrrel-macos
          path: build/krkrrel

  create-release:
    needs: [build-ubuntu, build-win32, build-macos]
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
      options: "--user 0"
    if: github.ref == 'refs/heads/main'
    steps:
      - run: apt-get -y update
      - run: apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install p7zip-full
      - name: Download ubuntu artifact
        uses: actions/download-artifact@v4
        with:
          name: krkrrel-ubuntu
          path: krkrrel-ubuntu

      - name: Download win32 artifact
        uses: actions/download-artifact@v4
        with:
          name: krkrrel-win32
          path: krkrrel-win32

      - name: Download macos artifact
        uses: actions/download-artifact@v4
        with:
          name: krkrrel-macos
          path: krkrrel-macos

      - name: Prepare artifacts for release
        run: |
          pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'
          chmod +x krkrrel-ubuntu/krkrrel
          chmod +x krkrrel-macos/krkrrel
          7z a -tzip krkrrel-ubuntu.zip krkrrel-ubuntu/*
          7z a -tzip krkrrel-win32.zip krkrrel-win32/*
          7z a -tzip krkrrel-macos.zip krkrrel-macos/*

      - name: Create prerelease
        if: github.ref == 'refs/heads/main'
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: true
          automatic_release_tag: "latest"
          title: "Latest development builds"
          files: |
            krkrrel-ubuntu.zip
            krkrrel-win32.zip
            krkrrel-macos.zip
